######################################################
# Perich & Miller (2018) 
######################################################

DATASET = "perich_miller_population_2018"
DANDI_ID = "000688"

RAW_DIR = config["RAW_DIR"]
PROCESSED_DIR = config["PROCESSED_DIR"]


checkpoint perich_miller_population_2018_download_data:
    output:
        f"{RAW_DIR}/{DATASET}/manifest.txt"
    shell:
        f"""
        mkdir -p {RAW_DIR}/{DATASET}
        dandi download -o {RAW_DIR}/{DATASET} -e refresh DANDI:000688/draft
        find {RAW_DIR}/{DATASET}/ -type f -name "*.nwb" | sed "s|^{RAW_DIR}/{DATASET}/||" | sed "s|^/*||" > {{output}}
        """

rule prepare_data:
    input:
        nwb_file = f"{RAW_DIR}/{DATASET}/{{file}}"
    output:
        temp(f"{PROCESSED_DIR}/{DATASET}/tmp/{{file}}.txt")
    log:
        f".snakemake/logs/{DATASET}/prepare_data.{{file}}.log"
    shell:
        f"""
        mkdir -p {PROCESSED_DIR}/{DATASET}/tmp
        python -m brainsets_pipelines.{DATASET}.prepare_data --input_file {{input.nwb_file}} --output_dir {PROCESSED_DIR}/{DATASET} >> {{log}}
        find {PROCESSED_DIR}/{DATASET}/ -type f -name "*.h5" | sed "s|^{PROCESSED_DIR}/{DATASET}//||" > {{output}}
        """

def aggregate_input(wildcards):
    with checkpoints.perich_miller_population_2018_download_data.get(**wildcards).output[0].open() as manifest:
        files = [line.strip() for line in manifest]
    return expand(f"{PROCESSED_DIR}/{DATASET}/tmp/{{file}}.txt", file=files)

rule merge_manifests:
    input:
        aggregate_input
    output:
        manifest = os.path.join(PROCESSED_DIR, DATASET, "manifest.txt")
    params:
        processed_dir = PROCESSED_DIR,  # Pass PROCESSED_DIR as a parameter
        dataset = DATASET,  # Pass DATASET as a parameter
        tmp_dir = os.path.join(PROCESSED_DIR, DATASET, "tmp")  # Path to the tmp directory
    shell:
        """
        # Create the manifest file
        find {params.processed_dir}/{params.dataset}/ -type f -name "*.h5" | sed "s|^{params.processed_dir}/{params.dataset}/||" > {output.manifest}

        # Remove the tmp directory
        if [ -d {params.tmp_dir} ]; then
            echo "Removing tmp directory: {params.tmp_dir}" >> {log}
            rm -rf {params.tmp_dir}
        else
            echo "Warning: tmp directory not found: {params.tmp_dir}" >> {log}
        fi
        """

rule all:
    input:
        f"{PROCESSED_DIR}/{DATASET}/manifest.txt"


# include: "../freeze.smk"
